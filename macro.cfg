#[gcode_macro FORCE_POSITION ]
#description:set position before force move
#gcode:
#  SET_KINEMATIC_POSITION X=50 Y=50 Z=50

#[gcode_macro TEST_MOVE]
#description:test move 100sq
#gcode:
# G91
# G1 X100 F36000
# G1 Y100
# G1 X-100
# G1 Y-100
# G1 X100 Y100
# G1 X-100
# G1 X100 Y-100
# G1 X-100

#PID tuneing
#[gcode_macro PID_Tune_PLA]
#gcode:
#    PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro PID_Tune_ABS]
gcode:
    PID_CALIBRATE HEATER=extruder TARGET=240

#[gcode_macro PID_Tune_BED60]
#gcode:
#    PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro BED_PIDTune_ABS]
gcode:
    PID_CALIBRATE HEATER=heater_bed TARGET=100

[gcode_macro M900]
gcode:
    SET_PRESSURE_ADVANCE ADVANCE={params.K|default(0)|float}


# ABL
[gcode_macro G29]
; gcode parameters for area bed mesh
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode:
    BED_MESH_CALIBRATE AREA_START={params.AREA_START} AREA_END={params.AREA_END}
    G0 X10 Y10 Z20 F6000

# level gantry
[gcode_macro G34]
gcode:
    Z_TILT_ADJUST
    G0 X0 Y0 Z10

[gcode_macro M701]
gcode:
    SAVE_GCODE_STATE NAME=loading_filament
    PLAY_SINGLE_FEEDBACK_SOUND
    PRINT MSG="Loading Fil."
    M83
    G92 E0.0
    MIN_TEMP_CHECK
    G1 E{params.FEED_LENGTH|default(10)|int} F200    ; slow feed filament
    G1 E{params.FAST_LOAD_LENGTH|default(50)|int} F2000    ; Fast load to cold zone
    G1 E{params.SLOW_LOAD_LENGTH|default(50)|int} F100     ; Slow load to nozzle
    G92 E0.0
    PLAY_SINGLE_FEEDBACK_SOUND
    PRINT MSG="Ready"
    RESTORE_GCODE_STATE NAME=loading_filament

# Unload filament. Extrude a small amount, quick pull then slow pull
[gcode_macro M702]
gcode:
    SAVE_GCODE_STATE NAME=unloading_filament
    PLAY_SINGLE_FEEDBACK_SOUND
    PRINT MSG="Unloading Fil."
    MIN_TEMP_CHECK
    G91 ; set relative
    G1 E{params.FEED_LENGTH|default(10)|int} F100 
    G92 E0.0
    G1 E-{params.FAST_UNLOAD_LENGTH|default(70)|int} F2000  ; fast unload
    G92 E0.0
    G1 E-{params.SLOW_UNLOAD_LENGTH|default(40)|int} F1000  ; slow unload
    G92 E0.0
    PLAY_SINGLE_FEEDBACK_SOUND
    PRINT MSG="Ready"
    RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro M600]
gcode:
    PAUSE
    PRINT MSG="Filament change!"

# Park toolhead
[gcode_macro M125]
gcode:
    SAVE_GCODE_STATE NAME=parking
    PLAY_SINGLE_FEEDBACK_SOUND
    G91
    G1 Z{params.ZLIFT|default(10)|int} F3000
    G90
    G1 X{params.XPOS|default(40)|int} Y{params.YPOS|default(40)|int} F3000
    RESTORE_GCODE_STATE NAME=parking

[gcode_macro START_PRINT]
variable_parameter_BED_TEMP: 60
variable_parameter_EXTRUDER_TEMP: 190
; gcode parameters for area bed mesh
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode:
    CLEAR_PAUSE
    M220 S100 ; reset feedrate
    
    PRINT MSG="Homing..."
    G28
    G90
    G0 X100 Y125 Z65 F3000 ;

    PRINT MSG="Waiting for temperature"
    ; preheat temp
    ;M140 S{params.BED_TEMP|default(60)|float - 10}
    ;M104 S150

    ; wait for bed
    ;M190 S{params.BED_TEMP|default(60)|float - 10}

    ; set real temp
    M140 S{params.BED_TEMP|default(60)|float}
    M190 S{params.BED_TEMP|default(60)|float}
    ; wait
    G4 P60000 
    ;60second
    M104 S{params.EXTRUDER_TEMP|default(200)|float}
    M109 S{params.EXTRUDER_TEMP|default(200)|float}

    PLAY_DOUBLE_FEEDBACK_SOUND

    PRINT MSG="Aligning Z..."
    G34
    G28 Z ;re-home Z because we have bltouch :3
    ;G29
    BED_MESH_CALIBRATE AREA_START={params.AREA_START} AREA_END={params.AREA_END}
    ;CHECK_MESH
    PRINT MSG="Prime Line"
    G92 E0 ;Reset Extruder
    G1 X0 Y0 F3000 ; move outside print area
    G1 Z0.2 F1000 ;Move to start position
    G1 E12
    G1 X100 E22 F1000 ;Draw the first line
    G1 X105 F3000 ;Move to side a little
    G1 X185 E36 F1500.0 ;Draw the second line
    G92 E0 ;Reset Extruder
    G1 Z1 F1000 ;Move Z Axis up

    M221 S92 ; Tunned flow
    PRINT MSG="{printer.print_stats.filename}"

[gcode_macro END_PRINT]
gcode:
    PRINT MSG="Done printing!"
    # M300ã€€; beep sound
    G90
    {% set z = printer.toolhead.position.z|float %}
    {% set z = z + 40 %}
    {% if z > 140 %}
        {% set z = 140 %}
    {% endif %}
    G0 Z{z} F3000 ;move z up
    G91 ; relative
    G1 E-2 F300
    G0 Z-2
    G90 ; absolute pos
    G1 X10 Y200 F3000
    TURN_OFF_HEATERS ; heaters off
    M84 ; disable steppers
    M107 ; fan off
    BED_MESH_CLEAR
    PLAY_LONG_FEEDBACK_SOUND
    ; auto save config if needed and restart firmware
    # AUTO_SAVE_CONFIG


[gcode_macro RESUME]
rename_existing: RESUME_OLD
gcode:
    G91
    G92 E0 ;Reset Extruder
    G1 E0.5 F300
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    PRINT MSG="{printer.print_stats.filename}"
    RESUME_OLD

[gcode_macro PAUSE]
rename_existing: PAUSE_OLD
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_state
    PAUSE_OLD
    G91
    G92 E0 ;Reset Extruder
    G1 E-2 F300
    M125 ; parking
    PRINT MSG="Paused!"


[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_OLD
gcode:
    PRINT MSG="Aborted!"
    G90
    {% set z = printer.toolhead.position.z|float %}
    {% set z = z + 40 %}
    {% if z > 140 %}
        {% set z = 140 %}
    {% endif %}
    G0 Z{z} F3000 ;move z up
    G91 ; relative
    G1 E-2 F300
    G0 Z-2
    G90 ; absolute pos
    G1 X10 Y200 F3000

    CLEAR_PAUSE
    TURN_OFF_HEATERS
    M107 ; fan off
    BED_MESH_CLEAR
    CANCEL_PRINT_OLD
    M84 ; disable steppers

[gcode_macro CHECK_MESH]
gcode:
    {% set ns = namespace(min_point = printer.bed_mesh.probed_matrix[0][0] ,max_point = printer.bed_mesh.probed_matrix[0][0]) %}

    {% for data_row in printer.bed_mesh.probed_matrix %}
        {% for probe_point in data_row %}
            {% if ns.min_point > probe_point %}
                {% set ns.min_point =  probe_point %}
            {% endif %}
            {% if ns.max_point < probe_point %}
                {% set ns.max_point =  probe_point %}
            {% endif %}
        {% endfor %}
    {% endfor %}

    { action_respond_info( "Mesh delta : " + (ns.max_point - ns.min_point) | string)}
    {% if ns.max_point - ns.min_point > params.THRESHOLD|default(0.4)|float %}
        { action_respond_info("Mesh Error!")}
        CANCEL_PRINT
    {% else %}
        { action_respond_info("Mesh OK!")}
    {% endif %}

# send custom msg
# OUTPUT_TARGET 0 : Both LCD and terminal , 1 : Terminal only , 2 : LCD only
[gcode_macro PRINT]
variable_parameter_MSG : ''
variable_parameter_OUTPUT_TARGET : 0
gcode:
    {% if params.OUTPUT_TARGET|default(0)|int == 0 %}
        M117 {params.MSG | string}
        { action_respond_info((params.MSG) | string)}
    {% elif params.OUTPUT_TARGET|default(0)|int == 1 %}
        { action_respond_info((params.MSG) | string)}
    {% else %}
        M117 {params.MSG | string}
    {% endif %}

[gcode_macro MIN_TEMP_CHECK]
gcode: 
    {% if printer.extruder.target != 0 %} # if there is a setpoint for extruder
        {% if printer.extruder.temperature < printer.extruder.target %} # if not reached, heat
            PLAY_LONG_FEEDBACK_SOUND
            M109 S{printer.extruder.target|float}
        {% endif %}
    {% else %} # if no setpoint for extruder
        PLAY_LONG_FEEDBACK_SOUND
        M109 S{params.T|default(200)|float}
    {% endif %}
    PLAY_DOUBLE_FEEDBACK_SOUND


# [delayed_gcode set_neopix_from_temp]
# initial_duration: 5
# gcode:
#   {% if printer.extruder.target == 0 and printer.heater_bed.target == 0 %}
#     {% if printer.extruder.temperature > 60.0 or printer.heater_bed.temperature > 60.0 %}
#       SET_LED LED=leds RED=0.5 GREEN=0.5 BLUE=0 
# #    {% elif printer.extruder.temperature > 50.0 or printer.heater_bed.temperature > 50.0 %}
# #      SET_LED LED=leds RED=0.05 GREEN=0.1 BLUE=0
# #    {% elif printer.extruder.temperature > 45.0 or printer.heater_bed.temperature > 45.0 %}
# #      SET_LED LED=leds RED=0 GREEN=0.05 BLUE=0.1
#     {% elif printer.extruder.temperature > 40.0 or printer.heater_bed.temperature > 40.0 %}
#       SET_LED LED=leds RED=0 GREEN=0 BLUE=0.2
#     {% else %}
# # Idling WHITE 
#       SET_LED LED=leds RED=0.2 GREEN=0.2 BLUE=0.2
#     {% endif %}
#   {% else %}
#   #any heater is targeted or Printing GREEN
#     SET_LED LED=leds RED=0 GREEN=0.5 BLUE=0.2
#   {% endif %}
#   UPDATE_DELAYED_GCODE ID=set_neopix_from_temp DURATION=5


# beeper control
[gcode_macro M300]
gcode:
    SET_PIN PIN=BEEPER_pin VALUE={params.S|default(100)|int}
    G4 P{params.P|default(1000)|int}
    SET_PIN PIN=BEEPER_pin VALUE=0

[gcode_macro PLAY_SINGLE_FEEDBACK_SOUND]
gcode:
    M300 S100 P100
    M300 S1 P100

[gcode_macro PLAY_DOUBLE_FEEDBACK_SOUND]
gcode:
    M300 S100 P100
    M300 S1 P100
    M300 S100 P100
    M300 S1 P100

[gcode_macro PLAY_LONG_FEEDBACK_SOUND]
gcode:
    M300 S100 P1000
    M300 S1 P100

[gcode_macro AUTO_SAVE_CONFIG]
gcode:
    {% if printer.configfile.save_config_pending %}
        PRINT MSG="Saving config"
        SAVE_CONFIG
    {% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum and maximum probe count
variable_min_probe_count : 3
; scale up the probe count on small area
variable_probe_count_scale_factor : 1.25
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
		{% set area_min_y = params.AREA_START.split(",")[1]|float %}
		{% set area_max_x = params.AREA_END.split(",")[0]|float %}
		{% set area_max_y = params.AREA_END.split(",")[1]|float %}

        {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}

        {% set meshMaxPointX = meshPointX %}
        {% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% set max_mesh_area = (safe_max_x - safe_min_x)*(safe_max_y - safe_min_y) %}

            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            PRINT MSG="Set custom mesh area to ({area_min_x},{area_min_y}),({area_max_x},{area_max_y})" OUTPUT_TARGET=1

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
            {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
            {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            PRINT MSG="Set custom mesh matrix to {meshPointX}x{meshPointY}" OUTPUT_TARGET=1
            PRINT MSG="Mesh: {meshPointX}x{meshPointY}" OUTPUT_TARGET=2

            BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int}
        {% else %}
            PRINT MSG="Invalid custom mesh parameters, probe using default setting" OUTPUT_TARGET=1
            PRINT MSG="Mesh: default" OUTPUT_TARGET=2
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        PRINT MSG="Invalid custom mesh parameters, probe using default setting" OUTPUT_TARGET=1
        PRINT MSG="Mesh: default" OUTPUT_TARGET=2
        BED_MESH_CALIBRATE_BASE
    {% endif %}

[gcode_macro DISPLAY_GCODE_PROGRESS]
variable_parameter_TOTAL_LAYER : 0
variable_parameter_CURRENT_LAYER : 0
variable_parameter_PROGRESS : 0
variable_parameter_REMAIN : 0
gcode:
    #PRINT MSG="@,{params.CURRENT_LAYER}/{params.TOTAL_LAYER},{params.PROGRESS},{params.REMAIN}" OUTPUT_TARGET=1
    PRINT MSG="LAYER,{params.CURRENT_LAYER}/{params.TOTAL_LAYER}" OUTPUT_TARGET=2
