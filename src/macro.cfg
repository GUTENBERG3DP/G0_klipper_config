# share variables between macros
# can be accessed via {printer["gcode_macro SHARE_VARIABLES"].VARIABLE_NAME}
# can be set with SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=VARIABLE_NAME VALUE=NEW_VALUE
[gcode_macro SHARE_VARIABLES]
variable_enable_save_config : False
variable_enable_bed_stablizer : True
variable_enable_debug_menu : False
gcode:

[gcode_macro _WAIT_BED_PWM]
description: _WAIT_BED_PWM CUTOFF=cutoff_pwm(0-1.0) DURATION=wait_duration(in seconds)
gcode:
  {% set cutoff = params.CUTOFF|float %}
  {% set duration = params.DURATION %}
  {% if printer.heater_bed.power > cutoff %}
    ;PRINT MSG="Waiting {duration}s for BED_PWM>{cutoff}..." OUTPUT_TARGET=1
    G4 P{duration}000
  {% endif %}

[gcode_macro WAIT_BED_TEMPERATURE_STABILIZED]
description: Wait until heater_bed.power goes down.
gcode:
  PRINT MSG="Start WAIT_BED_TEMPERATURE_STABILIZED" OUTPUT_TARGET=1
  _WAIT_BED_PWM CUTOFF=0.20 DURATION=15
  _WAIT_BED_PWM CUTOFF=0.30 DURATION=30
  _WAIT_BED_PWM CUTOFF=0.35 DURATION=30
  _WAIT_BED_PWM CUTOFF=0.40 DURATION=30
  _WAIT_BED_PWM CUTOFF=0.40 DURATION=30
  _WAIT_BED_PWM CUTOFF=0.50 DURATION=60
  _WAIT_BED_PWM CUTOFF=0.50 DURATION=60
  PRINT MSG="End WAIT_BED_TEMPERATURE_STABILIZED" OUTPUT_TARGET=1

[gcode_macro START_PRINT]
description:Start Print
variable_parameter_BED_TEMP: 60
variable_parameter_EXTRUDER_TEMP: 190
; gcode parameters for area bed mesh
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
variable_parameter_FILAMENT_TYPE : "PLA"
gcode:
    CLEAR_PAUSE
    M220 S100 ; reset feedrate
    ; reset gcode progress
    GCODE_PROGRESS TOTAL_LAYER=0 CURRENT_LAYER=0 PROGRESS=0 REMAIN="00:00"

    ; turn on chamber_fan if the set temp is higher than the current temp
    {% if printer.heater_bed.temperature > params.BED_TEMP %}
        SET_FAN_SPEED FAN=chamber_fan SPEED=1.0
    {% endif %}

    PRINT MSG="Homing..."
    G28

    ; Absolute Positioning
    G90
    G0 X125 Y100 F10000
    G0 Z100 F600 ;

    PRINT MSG="Waiting for bed temp."
    ; Pre-heat extruder
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150

    ; Wait for bed heatup
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.BED_TEMP|default(60)|float}

    {% if params.BED_TEMP|default(60)|int != 0 %}
        {% if printer["gcode_macro SHARE_VARIABLES"].enable_bed_stablizer %}
            TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={params.BED_TEMP|default(60)|float} MAXIMUM={params.BED_TEMP|default(60)|float + 5}
            ; chamber and  BED stabilize
            PRINT MSG="Stabilizing bed..." 
            SET_FAN_SPEED FAN=chamber_fan SPEED=0.99
            M106 S128
            WAIT_BED_TEMPERATURE_STABILIZED
            M107
            SET_FAN_SPEED FAN=chamber_fan SPEED=0
            PRINT MSG="Bed power stabled."
        {% else %}
            TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={params.BED_TEMP|default(60)|float - 5} MAXIMUM={params.BED_TEMP|default(60)|float + 5}
        {% endif %}
    {% endif %}


    PLAY_SINGLE_FEEDBACK_SOUND

    PRINT MSG="Aligning Z..."
    G34

    ; rehome Z
    PRINT MSG="Homing Z..."
    G28 Z ;re-home Z


    BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}BED_MESH_CALIBRATE AREA_START={params.AREA_START} AREA_END={params.AREA_END}
    ;CHECK_MESH

    BED_MESH_PROFILE LOAD=default

    ; set current filament data
    ;{params.FILAMENT_TYPE|default("DEFAULT")}

    ; start print job
    PLAY_DOUBLE_FEEDBACK_SOUND

    ;SKEW_PROFILE LOAD = my_skew_profile

    ; safe purge area X=0~130 Y = -15 ~ 0
    G92 E0 ;Reset Extruder
    G1 X0 Y-15 F10000 ; move outside print area
    G1 Z10 F600

    PRINT MSG="Waiting for nozzle temp."
    ; Set print nozzle temp
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.EXTRUDER_TEMP|default(200)|float}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.EXTRUDER_TEMP|default(200)|float - 5} MAXIMUM={params.EXTRUDER_TEMP|default(200)|float + 5}

    PRINT MSG="Prime Line"
    G92 E0 ; Reset Extruder
    G1 Z0.6 F1000 ;lower nozzle 
    G1 E10 F300 ; extrude a smal blob

    G92 E0 ; Reset Extruder
    G1 Z0.4 F1000
    G1 X50 E12 F1000 ; Draw the first line

    G92 E0 ; Reset Extruder
    G1 Z0.2 F1000
    G1 X60 F3000 ; Move to side a little
    G1 X110 E8 F1500 ; draw second line

    G92 E0 ; Reset Extruder
    G1 E1 F300 ; extrude a smal blob
    G1 X120 F500 ; move out of blob
    G1 Z2 F600 ; Move Z Axis up to avoid hitting

    #    M221 S92 ; Tunned flow
    PRINT MSG="{printer.print_stats.filename}"
    SET_NEOPIXEL STATE=printing

[gcode_macro END_PRINT]
description:End Print
gcode:
    G91 ; relative
    G1 E-2 F300 ; retract
    G0 Z2 F600 ; lift head
    G90 ; absolute pos
    G1 X70 Y200 F10000 ; move head
    ; lower plate
    {% if printer.toolhead.position.z|float < 170 %}
        G0 Z170 F600 
    {% endif %}
    ; lower bed (for printer with oldham coupler)
    ; {% if printer.toolhead.position.z|float < 150 %}
    ;    G0 Z150 F600 
    ; {% endif %}

    ; clear gcode progress
    GCODE_PROGRESS TOTAL_LAYER=0 CURRENT_LAYER=0 PROGRESS=0 REMAIN="00:00"

    PRINT MSG="Done printing!"
    PLAY_LONG_FEEDBACK_SOUND ; beep sound
    

    TURN_OFF_HEATERS ; heaters off
    M84 ; disable steppers
    M107 ; fan off
    SET_FAN_SPEED FAN=chamber_fan SPEED=0
    BED_MESH_CLEAR
    SET_SKEW CLEAR=1
    
    SET_NEOPIXEL STATE=ready
    AUTO_SAVE_CONFIG ; auto save config if needed and restart firmware

[gcode_macro CANCEL_PRINT]
description:Cancel Print
rename_existing: CANCEL_PRINT_OLD
gcode:
    G91 ; relative
    G1 E-2 F300 ; retract
    G0 Z2 F600 ; lift head
    G90 ; absolute pos
    G1 X70 Y200 F10000 ; move head
    ; lower plate
    {% if printer.toolhead.position.z|float < 170 %}
        G0 Z170 F600 
    {% endif %}
    ; lower bed (for printer with oldham coupler)
    ; {% if printer.toolhead.position.z|float < 150 %}
    ;    G0 Z150 F600 
    ; {% endif %}

    ; clear gcode progress
    GCODE_PROGRESS TOTAL_LAYER=0 CURRENT_LAYER=0 PROGRESS=0 REMAIN="00:00"

    PRINT MSG="Aborted!"
    PLAY_LONG_FEEDBACK_SOUND ; beep sound

    CLEAR_PAUSE
    TURN_OFF_HEATERS
    M107 ; fan off
    SET_FAN_SPEED FAN=chamber_fan SPEED=0
    BED_MESH_CLEAR
    CANCEL_PRINT_OLD
    M84 ; disable steppers
    SET_NEOPIXEL STATE=ready
    AUTO_SAVE_CONFIG


[gcode_macro RESUME]
description:Resume
rename_existing: RESUME_OLD
gcode:
    G91
    G92 E0 ;Reset Extruder
    G1 E0.5 F300
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    PRINT MSG="{printer.print_stats.filename}"
    RESUME_OLD

[gcode_macro PAUSE]
description:Pause
rename_existing: PAUSE_OLD
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_state
    PAUSE_OLD
    G91
    G92 E0 ;Reset Extruder
    G1 E-2 F300
    M125 ; parking
    PRINT MSG="Paused!"

[gcode_macro CHECK_MESH]
description:Check mesh
gcode:
    {% set ns = namespace(min_point = printer.bed_mesh.probed_matrix[0][0] ,max_point = printer.bed_mesh.probed_matrix[0][0]) %}

    {% for data_row in printer.bed_mesh.probed_matrix %}
        {% for probe_point in data_row %}
            {% if ns.min_point > probe_point %}
                {% set ns.min_point =  probe_point %}
            {% endif %}
            {% if ns.max_point < probe_point %}
                {% set ns.max_point =  probe_point %}
            {% endif %}
        {% endfor %}
    {% endfor %}

    { action_respond_info( "Mesh delta : " + (ns.max_point - ns.min_point) | string)}
    {% if ns.max_point - ns.min_point > params.THRESHOLD|default(0.4)|float %}
        { action_respond_info("Mesh Error!")}
        CANCEL_PRINT
    {% else %}
        { action_respond_info("Mesh OK!")}
    {% endif %}

# send custom msg
# OUTPUT_TARGET 0 : Both LCD and terminal , 1 : Terminal only , 2 : LCD only
[gcode_macro PRINT]
description:Print
variable_parameter_MSG : ''
variable_parameter_OUTPUT_TARGET : 0
gcode:
    {% if params.OUTPUT_TARGET|default(0)|int == 0 %}
        M117 {params.MSG | string}
        { action_respond_info((params.MSG) | string)}
    {% elif params.OUTPUT_TARGET|default(0)|int == 1 %}
        { action_respond_info((params.MSG) | string)}
    {% else %}
        M117 {params.MSG | string}
    {% endif %}

[gcode_macro MIN_TEMP_CHECK]
description:Min Temp Check
variable_parameter_MIN_TEMP: 250
gcode: 
    {% if printer.extruder.target != 0 %} # if there is a setpoint for extruder
        {% if printer.extruder.temperature < printer.extruder.target %} # if not reached, heat
            PLAY_LONG_FEEDBACK_SOUND
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={printer.extruder.target|float - 5} MAXIMUM={printer.extruder.target|float + 5}
        {% endif %}
    {% else %} # if no setpoint for extruder, set default value to 250
        PLAY_LONG_FEEDBACK_SOUND
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.MIN_TEMP|default(250)|float}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.MIN_TEMP|default(250)|float - 5} MAXIMUM={params.MIN_TEMP|default(250)|float + 5}
    {% endif %}
    PLAY_DOUBLE_FEEDBACK_SOUND

## LED Indicators ##

[gcode_macro SET_NEOPIXEL]
description: SET_NEOPIXEL [STATE={ready|printing|pause|busy|error|warning}]
gcode:
    {% set state = params.STATE %}
    {% if state  == "ready" %} #White
        SET_LED LED=leds RED=1.0 GREEN=1.0 BLUE=1.0
    {% elif state == "printing" %} #Blue
        SET_LED LED=leds RED=0.0 GREEN=0.0 BLUE=0.8  
    {% elif state == "pause" %} #Purple
        SET_LED LED=leds RED=0.0 GREEN=0.6 BLUE=0.6
    {% elif state == "busy" %} #Yellow
        SET_LED LED=leds RED=0.8 GREEN=0.8 BLUE=0.4
    {% elif state == "error" %} #Red
        SET_LED LED=leds RED=0.8 GREEN=0.0 BLUE=0.0
    {% elif state == "warning" %} #Red
        SET_LED LED=leds RED=1.0 GREEN=0.3 BLUE=0.0
    {% else %} #No light
        SET_LED LED=leds RED=0.0 GREEN=0.0 BLUE=0.0
    {% endif %}


#[delayed_gcode set_neopixel_from_temp]
#initial_duration: 5
#gcode:
#   {% if printer.extruder.target == 0 and printer.heater_bed.target == 0 %}
#    {% if printer.extruder.temperature > 60.0 or printer.heater_bed.temperature > 60.0 %}
#       SET_LED LED=leds RED=0.5 GREEN=0.5 BLUE=0 
#    {% elif printer.extruder.temperature > 50.0 or printer.heater_bed.temperature > 50.0 %}
#      SET_LED LED=leds RED=0.05 GREEN=0.1 BLUE=0
#    {% elif printer.extruder.temperature > 45.0 or printer.heater_bed.temperature > 45.0 %}
#     SET_LED LED=leds RED=0 GREEN=0.05 BLUE=0.1
#    {% elif printer.extruder.temperature > 40.0 or printer.heater_bed.temperature > 40.0 %}
#      SET_LED LED=leds RED=0 GREEN=0 BLUE=0.2
#    {% else %}
# # Idling WHITE 
#      SET_LED LED=leds RED=0.2 GREEN=0.2 BLUE=0.2
#    {% endif %}
#       {% else %}
# # any heater is targeted or Printing GREEN
#    SET_LED LED=leds RED=0 GREEN=0.5 BLUE=0.2
#      {% endif %}
#    UPDATE_DELAYED_GCODE ID=set_neopix_from_temp DURATION=5




[gcode_macro PLAY_SINGLE_FEEDBACK_SOUND]
gcode:
    M300 S100 P100
    M300 S1 P100

[gcode_macro PLAY_DOUBLE_FEEDBACK_SOUND]
gcode:
    M300 S100 P100
    M300 S1 P100
    M300 S100 P100
    M300 S1 P100

[gcode_macro PLAY_LONG_FEEDBACK_SOUND]
gcode:
    M300 S100 P1000
    M300 S1 P100

[gcode_macro BED_MESH_CALIBRATE]
description:Bed Mesh Calibrate
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum and maximum probe count
variable_min_probe_count : 4 # for bicubic
; scale up the probe count on small area
variable_probe_count_scale_factor : 1.25
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
		{% set area_min_y = params.AREA_START.split(",")[1]|float %}
		{% set area_max_x = params.AREA_END.split(",")[0]|float %}
		{% set area_max_y = params.AREA_END.split(",")[1]|float %}

        {% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}



        {% set meshMaxPointX = meshPointX %}
	    {% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            PRINT MSG="Set custom mesh area to ({area_min_x},{area_min_y}),({area_max_x},{area_max_y})" OUTPUT_TARGET=1

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x)  * probe_count_scale_factor|float)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
            {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor|float)|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
            {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            PRINT MSG="Set custom mesh matrix to {meshPointX}x{meshPointY}" OUTPUT_TARGET=1
            PRINT MSG="Mesh: {meshPointX}x{meshPointY}" OUTPUT_TARGET=2

            BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int}
        {% else %}
            PRINT MSG="Invalid custom mesh parameters, probe using default setting" OUTPUT_TARGET=1
            PRINT MSG="Mesh: default" OUTPUT_TARGET=2
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        PRINT MSG="Invalid custom mesh parameters, probe using default setting" OUTPUT_TARGET=1
        PRINT MSG="Mesh: default" OUTPUT_TARGET=2
        BED_MESH_CALIBRATE_BASE
    {% endif %}



[gcode_macro FORCE_MOVE_BED]
variable_parameter_DISTANCE: -10
gcode:
    SET_KINEMATIC_POSITION Z=100 ; fake position
    G91 ; Relative positioning
    G0 Z{params.DISTANCE|default(-10)|float}
    G90 ; Absolute positioning
    # M84 ; disable steppers, this will clear current position


[gcode_macro AUTO_SAVE_CONFIG]
description: Save and restart
gcode:
    {% if printer["gcode_macro SHARE_VARIABLES"].enable_save_config %}
        Z_OFFSET_APPLY_PROBE ; apply current gcode offset to probe
        PRINT MSG="Printer will restart and save current configs..." OUTPUT_TARGET=1
        PRINT MSG="Saving..." OUTPUT_TARGET=0
        SAVE_CONFIG
    {% endif %}

[gcode_macro ENABLE_SAVE_CONFIG]
description: Enable auto save config after print completed or canceled
gcode:
    SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=enable_save_config VALUE=True

[gcode_macro DISABLE_SAVE_CONFIG]
description: Disable auto save config after print completed or canceled
gcode:
    SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=enable_save_config VALUE=False

[gcode_macro TOGGLE_BED_STABLIZER]
description: Toggle bed stablizer
gcode:
    ; gcode variable take time to change, so use a tmp variable instead
    {% set flippedState = not(printer["gcode_macro SHARE_VARIABLES"].enable_bed_stablizer) %}
    SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=enable_bed_stablizer VALUE={ flippedState }

[delayed_gcode INIT]
initial_duration: 1.0
gcode:
    STARTUP_CHECK

[gcode_macro GCODE_PROGRESS]
variable_parameter_TOTAL_LAYER : 0
variable_parameter_CURRENT_LAYER : 0
variable_parameter_PROGRESS : 0
variable_parameter_REMAIN : "00:00"
variable_total_layer : 0
variable_current_layer : 0
variable_progress : 0
variable_remain : "none"
gcode:
    {% if "TOTAL_LAYER" in params %}
        SET_GCODE_VARIABLE MACRO=GCODE_PROGRESS VARIABLE=total_layer VALUE={ params.TOTAL_LAYER }
    {% else %}
        SET_GCODE_VARIABLE MACRO=GCODE_PROGRESS VARIABLE=total_layer VALUE=0
    {% endif %}

    {% if "CURRENT_LAYER" in params %}
        SET_GCODE_VARIABLE MACRO=GCODE_PROGRESS VARIABLE=current_layer VALUE={ params.CURRENT_LAYER }
    {% else %}
        SET_GCODE_VARIABLE MACRO=GCODE_PROGRESS VARIABLE=current_layer VALUE=0
    {% endif %}

    {% if "PROGRESS" in params %}
        SET_GCODE_VARIABLE MACRO=GCODE_PROGRESS VARIABLE=progress VALUE={ params.PROGRESS }
    {% else %}
        SET_GCODE_VARIABLE MACRO=GCODE_PROGRESS VARIABLE=progress VALUE=0
    {% endif %}

    {% if "REMAIN" in params %}
        SET_GCODE_VARIABLE MACRO=GCODE_PROGRESS VARIABLE=remain VALUE="'{ params.REMAIN }'"
    {% else %}
        SET_GCODE_VARIABLE MACRO=GCODE_PROGRESS VARIABLE=remain VALUE="'00:00'"
    {% endif %}


[gcode_macro STARTUP_CHECK]
gcode:
    {% if printer['temperature_sensor chamber'].temperature < 10 or printer.heater_bed.temperature < 10 or printer.extruder.temperature <10 %}
        SET_NEOPIXEL STATE=warning
        PRINT MSG="LOW TEMP!"
    {% else %}
        SET_NEOPIXEL STATE=ready
    {% endif %}

[gcode_macro HEAT_SOAK]
description: HEAT_SOAK [ACTION={start|stop|query}] DURATION={30} BED_TEMP={110}
variable_parameter_DURATION : 30
variable_parameter_ACTION : "start"
variable_parameter_BED_TEMP : 110
variable_remain_time : 0
variable_bed_temp: 0
gcode:
    {% if "ACTION" in params %}
            {% set action = params.ACTION|lower %}
            {% if action  == "start" %}
                SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=remain_time VALUE={params.DURATION|default(30)|int}
                SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=bed_temp VALUE={params.BED_TEMP|default(110)|int}
                G28
                G90
                G0 X125 Y100 F3000
                G0 Z10 F1000
                M106 S255
                SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.BED_TEMP|default(110)|int}
                UPDATE_DELAYED_GCODE ID=HEAT_SOAK_THREAD DURATION=1
            {% elif action  == "stop" %}
                SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=remain_time VALUE=0
                SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=bed_temp VALUE=0
                SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
                UPDATE_DELAYED_GCODE ID=HEAT_SOAK_THREAD DURATION=0
            {% elif action  == "query" %}
                {% if remain_time > 0 %}
                    PRINT MSG="Heat soak : running. Remain time {remain_time} , Bed temp : {printer.heater_bed.temperature}/{bed_temp}, Chanber temp : {printer['temperature_sensor chamber'].temperature}" OUTPUT_TARGET=1
                {% else %}
                    PRINT MSG="Heat soak : stopped." OUTPUT_TARGET=1
                {% endif %}
            {% else %}
                PRINT MSG="Heat soak : Invalid action!, the current HEAT_SOAK task will be canceled." OUTPUT_TARGET=1
                SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=remain_time VALUE=0
                SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=bed_temp VALUE=0
                SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
                UPDATE_DELAYED_GCODE ID=HEAT_SOAK_THREAD DURATION=0
            {% endif %}
    {% else %}
        PRINT MSG="Heat soak : No action!" OUTPUT_TARGET=1
    {% endif %}

[delayed_gcode HEAT_SOAK_THREAD]
initial_duration: 0.
gcode:
    {% if printer["gcode_macro HEAT_SOAK"].remain_time > 0 %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={printer["gcode_macro HEAT_SOAK"].bed_temp}
        SET_FAN_SPEED FAN=chamber_fan SPEED=0.99
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=remain_time VALUE={printer["gcode_macro HEAT_SOAK"].remain_time -1}
        PRINT MSG="Heat soak({printer["gcode_macro HEAT_SOAK"].remain_time}m)" OUTPUT_TARGET=0
        UPDATE_DELAYED_GCODE ID=HEAT_SOAK_THREAD DURATION=60
    {% else %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=remain_time VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=bed_temp VALUE=0
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
        SET_FAN_SPEED FAN=chamber_fan SPEED=0
        PRINT MSG="Heat soak ended! Chanber temp : {printer['temperature_sensor chamber'].temperature}" OUTPUT_TARGET=1
        UPDATE_DELAYED_GCODE ID=HEAT_SOAK_THREAD DURATION=0
    {% endif %}
